// Copyright © 2024 Jonas Frey. All rights reserved.

import Foundation

fileprivate let playerSymbols = Direction.allCases.map(\.playerSymbol)

fileprivate enum Direction: CaseIterable, Hashable {
    case up
    case down
    case left
    case right
    
    init?(playerSymbol: String) {
        switch playerSymbol {
        case Self.up.playerSymbol:
            self = .up
            
        case Self.down.playerSymbol:
            self = .down
            
        case Self.right.playerSymbol:
            self = .right
            
        case Self.left.playerSymbol:
            self = .left
            
        default:
            return nil
        }
    }
    
    var directionVector: Position {
        switch self {
        case .up:
            return .init(x: 0, y: -1)
        case .down:
            return .init(x: 0, y: 1)
        case .left:
            return .init(x: -1, y: 0)
        case .right:
            return .init(x: 1, y: 0)
        }
    }
    
    var playerSymbol: String {
        switch self {
        case .up:
            return "^"
        case .down:
            return "v"
        case .left:
            return "<"
        case .right:
            return ">"
        }
    }
    
    var nextClockwiseDirection: Self {
        switch self {
        case .up:
            return .right
        case .down:
            return .left
        case .left:
            return .up
        case .right:
            return .down
        }
    }
}

fileprivate enum VisitationAxis: Hashable {
    case horizontal
    case vertical
    case both
    
    init?(symbol: String) {
        switch symbol {
        case Self.horizontal.symbol:
            self = .horizontal
            
        case Self.vertical.symbol:
            self = .vertical
            
        case Self.both.symbol:
            self = .both
            
        default:
            return nil
        }
    }
    
    init(from direction: Direction) {
        switch direction {
        case .up, .down:
            self = .vertical
        case .left, .right:
            self = .horizontal
        }
    }
    
    var symbol: String {
        switch self {
        case .horizontal:
            return "–"

        case .vertical:
            return "|"

        case .both:
            return "+"
        }
    }
    
    func matches(_ direction: Direction) -> Bool {
        switch (self, direction) {
        case (.horizontal, .left), (.horizontal, .right):
            return true
            
        case (.vertical, .up), (.vertical, .down):
            return true
            
        case (.both, _):
            return true
            
        default:
            return false
        }
    }
}

fileprivate enum Field: Hashable {
    case empty
    case obstacle
    case visited(VisitationAxis)
    
    init?(_ symbol: String) {
        switch symbol {
        case Self.empty.symbol, Direction.up.playerSymbol, Direction.down.playerSymbol, Direction.left.playerSymbol, Direction.right.playerSymbol:
            self = .empty
            
        case Self.obstacle.symbol:
            self = .obstacle
            
        case Self.visited(.horizontal).symbol:
            self = .visited(.horizontal)
            
        case Self.visited(.vertical).symbol:
            self = .visited(.vertical)
            
        case Self.visited(.both).symbol:
            self = .visited(.both)

        default:
            return nil
        }
    }
    
    var symbol: String {
        switch self {
        case .empty:
            return "."
        case .obstacle:
            return "#"
        case let .visited(direction):
            return direction.symbol
        }
    }
    
    var isPassable: Bool {
        switch self {
        case .empty, .visited:
            return true

        case .obstacle:
            return false
        }
    }
    
    var isVisited: Bool {
        switch self {
        case .visited:
            return true
            
        default:
            return false
        }
    }
}

fileprivate struct Position: Hashable {
    var x: Int
    var y: Int
    
    static func +(lhs: Position, rhs: Position) -> Position {
        Position(x: lhs.x + rhs.x, y: lhs.y + rhs.y)
    }
    
    static func +=(lhs: inout Position, rhs: Position) {
        lhs = lhs + rhs
    }
}

fileprivate struct Player: Hashable {
    var position: Position
    var direction: Direction
}

fileprivate extension [[Field]] {
    subscript(position: Position) -> Field? {
        get {
            let row = self[safe: position.y]
            return row?[safe: position.x]
        }
        mutating set {
            self[safe: position.y]?[safe: position.x] = newValue
        }
    }
}

fileprivate class Board {
    var player: Player
    var data: [[Field]]
    
    init(data: [[String]]) {
        self.data = Self.parseBoardData(data)
        self.player = Self.findPlayer(on: data)
    }
    
    required init(fields: [[Field]], player: Player) {
        self.data = fields
        self.player = player
    }
    
    func start() -> Bool {
        // Stop when the player is off the board
        while data[player.position] != nil {
            if canMoveForward() {
                moveForward()
            } else {
                // We are standing before an obstacle
                if case let .visited(axis) = data[player.position] {
                    // We have been here before
                    if axis.matches(player.direction) {
                        // Last time we hit this obstacle, we were moving on the same axis, this means we are in an endless loop.
                        return false
                    }
                }
                turnRight()
            }
        }
        
        return true
    }
    
    // Does not check for blocks
    func moveForward() {
        move(direction: player.direction)
    }
    
    func canMoveForward() -> Bool {
        let nextField = player.position + player.direction.directionVector
        // If there is no field (going out of the board, we return true, as this finishes the game
        return data[nextField]?.isPassable ?? true
    }
    
    func turnRight() {
        markPositionVisited()
        player.direction = player.direction.nextClockwiseDirection
    }
    
    // Does not check for blocks
    private func move(_ amount: Int = 1, direction: Direction) {
        let directionVector = direction.directionVector
        // Recursively move step by step
        if amount > 1 {
            move(amount - 1, direction: direction)
        }

        let newPosition = player.position + directionVector
        assert(
            data[newPosition]?.isPassable ?? true,
            "Trying to move onto an impassable field (from \(player.position) to \(newPosition)). Target field has type \(String(describing: data[newPosition]))"
        )
        markPositionVisited()

        player.position = newPosition
    }
    
    private func markPositionVisited() {
        let newAxis = VisitationAxis(from: player.direction)

        switch data[player.position] {
        case let .visited(axis):
            // If the field is already visited, but from a different axis, mark it as visited from both
            if axis != newAxis {
                data[player.position] = .visited(.both)
            } else {
                fallthrough
            }
            
        default:
            data[player.position] = .visited(newAxis)
        }
    }
}

// MARK: - Parsing
extension Board {
    static func parseBoardData(_ data: [[String]]) -> [[Field]] {
        data.map { row in
            row.map { symbol in
                Field(symbol)!
            }
        }
    }
    
    static func findPlayer(on board: [[String]]) -> Player {
        let playerSymbols = Direction.allCases.map(\.playerSymbol)
        let row = board.first { currentRow in
            currentRow.contains { playerSymbols.contains($0) }
        }!
        let y = board.firstIndex(of: row)!
        let playerSymbol = row.first(where: { playerSymbols.contains($0) })!
        let x = row.firstIndex(of: playerSymbol)!
        return Player(position: .init(x: x, y: y), direction: Direction(playerSymbol: playerSymbol)!)
    }
}

// MARK: - Drawing
extension Board {
    func drawBoard() {
        let board = data.map { $0.map(\.symbol).joined() }
        fflush(stdout)
        print(board.joined(separator: "\n"), terminator: "\n\n\n\n")
    }
}

// MARK: - Copying
extension Board {
    func copy() -> Self {
        return .init(fields: data, player: player)
    }
}

struct Day6Part2: Day {
    func run(input: String) throws -> String {
        var obstaclePositions = 0
        let baseBoard = Board(data: input.components(separatedBy: .newlines).map { str in str.map(String.init) })
        let finishedBoard = baseBoard.copy()
        let startingPosition = baseBoard.player.position
        
        // We only need to check the positions where the player will eventually move
        // For that we have to run the base game once
        _ = finishedBoard.start()
        
        // Total number of valid obstacle positions
        let totalFields = baseBoard.data.joined().count

        for y in 0..<baseBoard.data.count {
            for x in 0..<baseBoard.data[0].count {
                let progress = y * baseBoard.data[0].count + x
                let percent = Double(progress) / Double(totalFields) * 100
                let percentString = percent.formatted(.number.precision(.fractionLength(2)))
                print("Checking game \(progress) / \(totalFields) (\(percentString) %)", terminator: "\r")

                let position = Position(x: x, y: y)
                
                // Only place obstacles on empty fields
                guard
                    let field = finishedBoard.data[position],
                    field.isVisited,
                    position != startingPosition
                else { continue }
                
                // Clone the board and add an obstacle
                let board = baseBoard.copy()
                board.data[position] = .obstacle

                if !board.start() {
//                    print("Obstacle position \(position) leads to an endless loop.")
                    obstaclePositions += 1
                }
            }
        }
        return "\(obstaclePositions)"
    }
    
    var testInput: String = """
    ....#.....
    .........#
    ..........
    ..#.......
    .......#..
    ..........
    .#..^.....
    ........#.
    #.........
    ......#...
    """
    
    var expectedTestResult: String = "6"
    
    var input: String = """
    ..........#.............................#...............#...........#....................#...........#............................
    ..............................#.......#...#.....#.....#...............#.#..#.......................#............#.................
    .............#...........#.#........#............#..........................#.........#.......#......#............................
    ......................................................#....#..#.............#................................#...#............##..
    ...............#.....#....................................#......................................................#................
    ..................##............#......#...............................................................#...................#......
    .#......#...........................................................#............................#................................
    #..#.............#...............................#.....#....#.............................#....#..............................#...
    #...##..........#.........................#.................................................#............#...............#........
    ............#...............#..............................................#.................................#..........##........
    ..............#...................#......##...#.....#....................#.......................................................#
    .#.....#....#......................#...#........................................#.#.............#.........#.......................
    #..#...............#........##.........#.....#..........#.....##.........................#.....#.#................................
    ...............#...............................#.....#.................................................#..##......................
    ......#...................#..........#...........................................#....#...........................................
    ...............................................#...#....##.................................................#.....#................
    .................#.........#..............................#........#...#...#...................................#..................
    ...........#..#.....#...#.........................#..........#.#.............#....#...................##..........................
    .........................................#.........................#.#............#...#...##............................#.........
    .....#......................................#....................................................#..............#.................
    ..................................................#..................#................#.............#.#..#..................#.....
    ............................................#.....#......................#........#..........................................#....
    .......#..........................#...#...................................#.........................#...#..........#......#.......
    ............#...........##........................................................................#......................#........
    #.#...............................................#........#..........#.#..#...#................................#.................
    ..#.........................#.#........................#....##..................................................#............#....
    .....................................................................................#...............#...........#..........#.....
    ....................#..........#................................#...............................................#.................
    #..............#.#...........#.........#..........#..........................#......................##........#.........#.........
    ....#....#...............................................................................#...#...........#............#...#...#...
    .......................................................##......................#...#................................#.............
    .......#...........##...........................#..............#..............................#...................#......#........
    ......#.........#..............................................................#........#..#..........#.......#..#...#.....#....#.
    ....#.............................................#........#....#..................................#..............................
    ..........#......#...........#....................................#..............#.......#...#............#.......................
    ...........................................................................................#.......#..............................
    .#..................................................#.............................#..................#...................#........
    ......#..#.#................#.....................#..................................#.............#...............#..............
    ...............................#..................#........#......................................................................
    ......................#..................................................................................#.........#..............
    ...............................................................................................................................#..
    .......#..............#...........................................................#......................#.......................#
    #...............................#..............................#.......#..............................#...#...#........#..........
    ............................#....#...#.........#....#................................................................#............
    .....................#.................................................................#..#....#..................#...............
    ......................#.............#.............................#...................................................#...........
    ....#.................#.#.........##................#.....#....................................................#.............#....
    ...............................#...#...................#.......................................#......#...........................
    ....#.............................................................................................................................
    ...#.......................................................................................................#............#.......#.
    ..#.............##.............................................................#...#............................#............#....
    ......................#.......#............#........................................................#..................#......#...
    ...................#.............#..................#..............................#............#........#...................#....
    ....................#...........#.........................................................#......#.......#...........#.....##.....
    ...........#.........................................#.............................#..............#..................#............
    ......................#.........#...................#......#...........................................#..........................
    ..#....#...#.............................#..............#.....................#............#...................................#..
    .....#.............................#....#..................................#...................#...#.............#................
    ...................#...#...........#........................#.............#........................#...#.............#..........#.
    ...#...........#......#.......#..............#......#..........#.....#............................................................
    ..#......................................................#......#...........................#...........#......#..#...............
    ........#............................#.#....................#...#...#......#.....#...............................................#
    .............#....#........#.........................................................................................#.........#..
    ....................................................................................................#.............................
    ..#........................#....#............................................................................#....................
    .......................................#.....#.#.......................................#......#........#.#...................#....
    .................#........#....................................#...#..#................................#..........................
    ...........#.................................................................................................#....................
    ......................#..................#...#.............#................##................#.......#...........#.........#.....
    ............#..#................#.............................................#............##..................##..........#......
    ......#.#.......................#............#...........................................................#........................
    #......................................#.#......^...............................................#.................................
    ........#...........................................................#...............#.............................................
    ...#.............................................#.................#...............#.............................#...#.#..........
    ....................#........#...........##.......................#.................#..................#................#.........
    #.................................................................................................................................
    ............#.......................................................................................#.#.........#..............#..
    ...............#....#............#..................................................#......##.................................#...
    .............................#.........#...............#......#.......#.................#........................#........#.......
    ......................................................#........................................................#.................#
    .................#.#...............#......................................................................................#....#..
    ........#.............#......................#...........#...........#......................................#..............#......
    ......................#......................#...........#.....#.....##............................................#....#.........
    .............#................................................................................#..........#.....#..................
    ............##...........................#.................................#..#.#....................................#............
    ..............................................................................................#............................#......
    ...#.............................#..#..#....................................#..............#....#.................................
    .....#..........................................................#.....#......#.........#..........................................
    ....##......#.....................#..........#..............#..................#.#..............#........#...........#....#.......
    .....#...#.........#............#............#.............................................................#......................
    .........#...................................#...........#.....................................##.....#............#..............
    .....##.#............##.....................#..........................#.................................#........#...............
    .......................#..............##...#...................................................#.........#........................
    ..#........#.......#...#..##............#....................................................................#...........#.....#..
    ..#.....................................................................#..............#.............#...................#........
    ...........#..........#..........#.....#.................................................................#..#.....................
    ..........#................#........................................................##.#...............................#.#......#.
    #............................................#...........................##...#.......................#.............#.............
    ..#............#........................................................................................................#.........
    ....................................................#....................#............#...............#..........................#
    ........................................................................#.......#.....................................#.#.........
    ................#..#......................#...........................................#...........................................
    ........................##............................................#.............##..........................#.......#....#....
    .........#.......#..............................#......#....#............#..................#...#.................................
    #.........#............................#....#.#..#.........................................................##.....................
    .#..##...............#....#.............................#...............#........#.......................................#......#.
    ...#............................................................#.....................#.................#.....#...................
    ...#...........#..#.............................#.....#.............................................................#.............
    ...#.........................#..............................................................................................##....
    .........................#...........................#.......................#...........#........................................
    .#..................................#.............................................................................................
    ....................................................................#...........##.....#.#.........#.....#........................
    ................#...............................#........#........................................................................
    ......#....#.................................#...................................#.#.........#.....#....................#.........
    ................#..............................#.......................#...#.....#.......#................#.......................
    ....................#......................................#..#...........#.#.................#...#.......................#.......
    .............#..#...#............................#.#...........................................#.......................#..........
    .........#..........#.................#....................................#.#..........................................#.........
    ....#.............#......................................................#...........#...........................#................
    ........#.#............................#...........................................#.................#..............#..........#..
    ..............#..........................#............#.........#....#...#.....#.........................#....#...............##..
    ...................#.........................................................#.......#........#..............#..........#.........
    .#........#....#..................................#..#.#...............#............#...........#.................................
    ...............................................................................................#.....#....#.............#.........
    ...........#..........#...........................................#.........#..............#................#..........#..........
    ............#.................................###..............#.#...............................................................#
    ......#...................................................................................#............#...#..........#.....#.....
    .............#..................#...................#......#.........#..#.......................#....#................#..........#
    ..#....##................................#.................#...........................#.......#....#...#..........#..............
    ...............................#......................................#.........#.............#......................#..........#.
    """
}
